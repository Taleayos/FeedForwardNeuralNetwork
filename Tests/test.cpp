#include <gtest/gtest.h>

#include "../Model/model.h"
#include "../Model/graph.h"

TEST(mlp_model, test1) {
  Model model;
  std::deque<double> input_test = {
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   2,   9,   21,  32,  8,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   20,  81,  139, 172, 202, 127, 51,  38,  20,  1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
      12,  123, 230, 250, 252, 254, 246, 222, 216, 158, 36,  3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   20,  47,  175,
      250, 254, 254, 254, 254, 250, 249, 218, 95,  22,  7,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   110, 190, 247, 254, 246,
      233, 218, 233, 250, 252, 253, 232, 154, 79,  4,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   22,  172, 233, 254, 234, 132, 84,  41,
      82,  144, 189, 251, 254, 234, 187, 66,  2,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   83,  232, 251, 247, 159, 23,  4,   0,   2,   24,
      79,  207, 249, 254, 248, 138, 9,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   8,   127, 246, 253, 232, 95,  7,   0,   0,   0,   7,   32,  131,
      234, 254, 252, 172, 21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      34,  204, 253, 247, 159, 22,  0,   0,   0,   0,   0,   0,   24,  173, 252,
      254, 220, 50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   84,  233,
      246, 210, 49,  3,   0,   0,   0,   0,   0,   0,   4,   115, 245, 254, 245,
      115, 4,   0,   0,   0,   0,   0,   0,   0,   2,   21,  170, 251, 233, 173,
      51,  63,  7,   0,   0,   0,   0,   0,   0,   50,  220, 250, 252, 172, 21,
      2,   0,   0,   0,   0,   0,   0,   4,   37,  215, 254, 223, 149, 135, 197,
      44,  8,   0,   0,   0,   0,   0,   21,  172, 233, 254, 215, 37,  4,   0,
      0,   0,   0,   0,   0,   4,   37,  215, 254, 225, 163, 180, 224, 68,  16,
      0,   0,   0,   0,   0,   9,   140, 222, 254, 217, 37,  4,   0,   0,   0,
      0,   0,   0,   2,   21,  172, 252, 250, 241, 248, 226, 62,  13,  0,   0,
      0,   0,   0,   4,   127, 217, 254, 222, 51,  9,   0,   0,   0,   0,   0,
      0,   0,   5,   127, 249, 254, 254, 254, 244, 112, 32,  0,   0,   0,   0,
      0,   4,   114, 203, 254, 245, 114, 32,  0,   0,   0,   0,   0,   0,   0,
      2,   82,  233, 254, 255, 254, 233, 82,  21,  0,   0,   0,   0,   0,   0,
      46,  127, 246, 250, 127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   33,
      191, 249, 254, 253, 202, 34,  4,   0,   0,   0,   0,   0,   0,   10,  52,
      222, 250, 127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   19,  126, 232,
      248, 243, 158, 20,  2,   0,   0,   0,   0,   0,   0,   10,  52,  222, 250,
      127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   22,  109, 125, 113,
      33,  1,   0,   0,   0,   0,   0,   5,   32,  64,  133, 246, 245, 114, 32,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   4,   4,   0,   0,
      0,   0,   0,   0,   0,   27,  171, 221, 236, 253, 220, 50,  9,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   9,   140, 250, 254, 247, 159, 20,  2,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   5,   126, 248, 253, 232, 95,  7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,
      65,  169, 202, 154, 22,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   21,
      32,  20,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0};
  for (auto& i : input_test) i /= 255;
  model.LoadWeightsFromFile("weights82");
  model.SetValueInput(input_test);
  model.Forward(false);
  double index = model.GetMaxIndex();
  ASSERT_EQ(index + 65, 'C');
}

TEST(mlp_model, test2) {
  Model model;
  std::deque<double> input_test = {
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   3,   20,  27,  8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   5,   33,  84,  169, 190, 126, 33,  1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   3,   47,  190, 233, 251, 253, 244, 163, 33,  0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   20,  67,
      175, 247, 254, 254, 254, 254, 244, 127, 10,  1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   45,  122, 231, 253,
      254, 255, 255, 254, 251, 175, 34,  7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   4,   114, 203, 254, 254, 254, 253,
      254, 254, 254, 243, 113, 32,  0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   22,  145, 222, 254, 253, 228, 218, 242, 254,
      254, 243, 113, 32,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   4,   110, 232, 249, 253, 219, 126, 213, 246, 254, 252, 177,
      34,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   21,  172, 252, 254, 232, 98,  91,  233, 252, 254, 245, 115, 4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   32,
      203, 254, 254, 209, 54,  118, 245, 254, 254, 232, 82,  2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   37,  217, 254,
      250, 142, 77,  188, 252, 254, 252, 172, 22,  0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   37,  214, 232, 207, 111,
      177, 250, 254, 254, 250, 130, 5,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   20,  138, 93,  51,  119, 243, 254,
      255, 255, 252, 173, 22,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   15,  6,   4,   93,  236, 254, 254, 254,
      254, 232, 100, 32,  17,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   1,   53,  165, 215, 222, 233, 251, 253,
      232, 152, 75,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   18,  81,  125, 140, 173, 232, 253, 250, 170,
      81,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   2,   4,   9,   22,  100, 230, 250, 188, 108, 9,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   20,  111, 190, 243, 218, 77,  2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   7,   115, 242, 243, 112, 3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   33,  160, 188, 51,  0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   8,   92,  145, 50,  0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   33,  106, 106, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      8,   42,  112, 15,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
      24,  4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0};
  for (auto& i : input_test) i /= 255;
  std::vector<int> layers = {784, 64, 26};
  size_t num_epochs = 1;
  bool normalize = true;
  for (size_t k = 1; k <= num_epochs; ++k) {
    model.Learning("Tests/trainA.csv", layers, normalize);
  }
  model.SetValueInput(input_test);
  model.Forward(false);
  double index = model.GetMaxIndex();
  ASSERT_EQ(index + 65, 'A');
}

TEST(mlp_model, test3) {
  GraphModel graph;
  std::deque<double> input_test = {
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   2,   9,   21,  32,  8,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   20,  81,  139, 172, 202, 127, 51,  38,  20,  1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,
      12,  123, 230, 250, 252, 254, 246, 222, 216, 158, 36,  3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   20,  47,  175,
      250, 254, 254, 254, 254, 250, 249, 218, 95,  22,  7,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   110, 190, 247, 254, 246,
      233, 218, 233, 250, 252, 253, 232, 154, 79,  4,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   22,  172, 233, 254, 234, 132, 84,  41,
      82,  144, 189, 251, 254, 234, 187, 66,  2,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   83,  232, 251, 247, 159, 23,  4,   0,   2,   24,
      79,  207, 249, 254, 248, 138, 9,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   8,   127, 246, 253, 232, 95,  7,   0,   0,   0,   7,   32,  131,
      234, 254, 252, 172, 21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      34,  204, 253, 247, 159, 22,  0,   0,   0,   0,   0,   0,   24,  173, 252,
      254, 220, 50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   84,  233,
      246, 210, 49,  3,   0,   0,   0,   0,   0,   0,   4,   115, 245, 254, 245,
      115, 4,   0,   0,   0,   0,   0,   0,   0,   2,   21,  170, 251, 233, 173,
      51,  63,  7,   0,   0,   0,   0,   0,   0,   50,  220, 250, 252, 172, 21,
      2,   0,   0,   0,   0,   0,   0,   4,   37,  215, 254, 223, 149, 135, 197,
      44,  8,   0,   0,   0,   0,   0,   21,  172, 233, 254, 215, 37,  4,   0,
      0,   0,   0,   0,   0,   4,   37,  215, 254, 225, 163, 180, 224, 68,  16,
      0,   0,   0,   0,   0,   9,   140, 222, 254, 217, 37,  4,   0,   0,   0,
      0,   0,   0,   2,   21,  172, 252, 250, 241, 248, 226, 62,  13,  0,   0,
      0,   0,   0,   4,   127, 217, 254, 222, 51,  9,   0,   0,   0,   0,   0,
      0,   0,   5,   127, 249, 254, 254, 254, 244, 112, 32,  0,   0,   0,   0,
      0,   4,   114, 203, 254, 245, 114, 32,  0,   0,   0,   0,   0,   0,   0,
      2,   82,  233, 254, 255, 254, 233, 82,  21,  0,   0,   0,   0,   0,   0,
      46,  127, 246, 250, 127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   33,
      191, 249, 254, 253, 202, 34,  4,   0,   0,   0,   0,   0,   0,   10,  52,
      222, 250, 127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   19,  126, 232,
      248, 243, 158, 20,  2,   0,   0,   0,   0,   0,   0,   10,  52,  222, 250,
      127, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   22,  109, 125, 113,
      33,  1,   0,   0,   0,   0,   0,   5,   32,  64,  133, 246, 245, 114, 32,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   4,   4,   0,   0,
      0,   0,   0,   0,   0,   27,  171, 221, 236, 253, 220, 50,  9,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   9,   140, 250, 254, 247, 159, 20,  2,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   5,   126, 248, 253, 232, 95,  7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,
      65,  169, 202, 154, 22,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   21,
      32,  20,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0};
  for (auto& i : input_test) i /= 255;
  graph.LoadWeightsFromFile("weights82");
    graph.LoadInputLayer(input_test);
  graph.Forward();
  double index = graph.GetMaxIndex();
  ASSERT_EQ(index + 65, 'C');
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
